I"í<p>A continuaci√≥n, se da una orientaci√≥n para empezar:
\begin{itemize}</p>
<ul>
  <li><strong>Aprende √°lgebra lineal.</strong> Es necesario aprender conceptos sobre vectores y matrices como el producto escalar, producto vectorial y transformaciones.</li>
  <li><strong>Aprende C++ (o cualquier otro lenguaje de programaci√≥n).</strong> Hay que saber como programar. Se recomienda aprender C++. Ser√° necesario saber sobre clases, m√©todos, herencia, polimorfismo y encapsulamiento.</li>
  <li><strong>Desarrolla un motor de c√°lculo vectorial.</strong> Usa tu conocimiento sobre vectores, matrices y programaci√≥n para desarrollar un motor de c√°lculo.</li>
  <li><strong>Aprende computaci√≥n gr√°fica.</strong> Familiar√≠zate con la computaci√≥n gr√°fica, sobre todo con la tuber√≠a de renderizado (Rendering Pipeline) y sombreadores. Evita el uso de OpenGL al comienzo. Cuesta entender su API si tienes poco conocimiento sobre los conceptos de computaci√≥n gr√°fica.</li>
  <li><strong>Aprende OpenGL y haz muchos proyectos.</strong> Una vez que te sientas c√≥modo con los conceptos de computaci√≥n gr√°fica, aprende sobre la API de OpenGL y sus sombreadores. Haz tantos proyectos como puedas. Aprende tanto renderizar personajes como rotar y trasladar personajes. Tambi√©n, debes saber c√≥mo colocar texturas y c√≥mo funciona las luces. Se recomienda hacer tantos proyectos como se pueda para esta parte.</li>
  <li><strong>Aprende patrones de dise√±o.</strong> Es necesario aprender la arquitectura de las API. Un motor de juego es simplemente una API, un entorno de trabajo, que se encarga de todo el renderizado, f√≠sica y operaciones matem√°ticas. Es fundamental desarrollar una API que es modular, flexible, sostenible y adaptable.
    <blockquote>
      <p>Para el desarrollo, necesitaras aprender patrones de dise√±o (Design Patterns). La mayor√≠a de patrones comunes de dise√±o son Singleton, Observer, Strategy, Compositer, Factory entre otros.
<strong>Desarrolla un motor de renderizado.</strong> Combina tu conocimiento sobre √°lgebra lineal, computaci√≥n gr√°fica, OpenGL y patrones de dise√±o para desarrollar un motor de renderizado.
<strong>Revisa las leyes de movimiento de Newton.</strong> La parte complicada del motor es el motor de f√≠sica. Para desarrollarlo, es necesario conocer primero las leyes de movimiento de Newton y c√≥mo se implementan, usando algoritmos como los m√©todos de Runge-Kutta.
<strong>Aprende algoritmos de geometr√≠a computacional.</strong> Un motor de juego no puede serlo sin detecci√≥n de colisiones. Para desarrollar un sistema de detecci√≥n de colisiones, es necesario aprender algoritmos de geometr√≠a computacional tales como GJK, BVH y Sutherland-Hodgman. Estos algoritmos son usados para detectar cu√°ndo y d√≥nde ocurre una colisi√≥n, y qu√© objetos son m√°s propensos a chocar.
<strong>Desarrolla un motor de f√≠sica.</strong> Una vez conocidos los algoritmos mencionados anteriormente, deber√≠as ser capaz de desarrollar un motor de f√≠sica con un sistema de detecci√≥n de colisiones.
<strong>Desarrolla un juego. Prueba y error.</strong> Llegado a este punto, tiene un motor de juego. Desarrolla tantos juegos como puedas para probar su funcionamiento y corregir errores que aparezcan. Tambi√©n, puedes implementar nuevas funciones.
\end{itemize}</p>
    </blockquote>
  </li>
</ul>

<p>Algunos libros √∫tiles para empezar son los siguientes:</p>
<ul>
  <li>Fletcher Dunn, Ian Parberry. <em>3D Math Primer for Graphics and Game Development.</em></li>
  <li>Graham Sellers, Richard S. Wright, Nicholas Haemel. <em>OpenGL Superbible: Comprehensive Tutorial and Reference.</em></li>
  <li>Mike Bailey, Steve Cunningham. <em>Graphics Shaders: Theory and Practice, Second Edition.</em></li>
  <li>David M Bourg, Bryan Bywalec. <em>Physics for Game Developers: Science, math, and code for realistic effects.</em></li>
  <li>Ian Millington. <em>Game Physics Engine Development: How to Build a Robust Commercial-Grade Physics Engine for your Game 2nd Edition.</em></li>
  <li>Christer Ericson. <em>Real-Time Collision Detection.</em></li>
</ul>

<p>El primer libro trata la matem√°tica 3D. Los dos siguientes sobre el motor de renderizado, y los √∫ltimos, sobre el motor de f√≠sica.</p>
:ET